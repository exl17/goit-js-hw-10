{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast/dist/js/iziToast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    const selectedDate = selectedDates[0];\n    const currentDate = new Date();\n\n    if (selectedDate <= currentDate) {\n      iziToast.error({\n        title: \"Error\",\n        message: \"Please choose a date in the future\",\n      });\n\n      \n      document.querySelector('[data-start]').disabled = true;\n    } else {\n      document.querySelector('[data-start]').disabled = false;\n    }\n  },\n};\n\n\nflatpickr(\"#datetime-picker\", options);\n\nfunction addLeadingZero(value) {\n  return value < 10 ? `0${value}` : value;\n}\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nlet countdownInterval;\nlet targetDate;\n\nfunction updateTimer() {\n  const currentDate = new Date();\n  const difference = targetDate - currentDate;\n\n  if (difference <= 0) {\n    clearInterval(countdownInterval);\n    updateInterface({ days: 0, hours: 0, minutes: 0, seconds: 0 });\n    return;\n  }\n\n  const timeLeft = convertMs(difference);\n  updateInterface(timeLeft);\n}\n\nfunction updateInterface({ days, hours, minutes, seconds }) {\n  document.querySelector('[data-days]').textContent = addLeadingZero(days);\n  document.querySelector('[data-hours]').textContent = addLeadingZero(hours);\n  document.querySelector('[data-minutes]').textContent = addLeadingZero(minutes);\n  document.querySelector('[data-seconds]').textContent = addLeadingZero(seconds);\n}\n\n\ndocument.querySelector('[data-start]').addEventListener('click', () => {\n\n  document.querySelector('[data-start]').disabled = true;\n\n  const selectedDate = flatpickr(\"#datetime-picker\").selectedDates[0];\n\n  targetDate = selectedDate;\n\n  updateTimer();\n\n  countdownInterval = setInterval(updateTimer, 1000);\n});\n"],"names":["options","selectedDates","selectedDate","currentDate","iziToast","flatpickr","addLeadingZero","value","convertMs","ms","days","hours","minutes","seconds","countdownInterval","targetDate","updateTimer","difference","updateInterface","timeLeft"],"mappings":"2FAMA,MAAMA,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,MAAMC,EAAeD,EAAc,GAC7BE,EAAc,IAAI,KAEpBD,GAAgBC,GAClBC,EAAS,MAAM,CACb,MAAO,QACP,QAAS,oCACjB,CAAO,EAGD,SAAS,cAAc,cAAc,EAAE,SAAW,IAElD,SAAS,cAAc,cAAc,EAAE,SAAW,EAErD,CACH,EAGAC,EAAU,mBAAoBL,CAAO,EAErC,SAASM,EAAeC,EAAO,CAC7B,OAAOA,EAAQ,GAAK,IAAIA,IAAUA,CACpC,CAEA,SAASC,EAAUC,EAAI,CAMrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,IAAIC,EACAC,EAEJ,SAASC,GAAc,CACrB,MAAMb,EAAc,IAAI,KAClBc,EAAaF,EAAaZ,EAEhC,GAAIc,GAAc,EAAG,CACnB,cAAcH,CAAiB,EAC/BI,EAAgB,CAAE,KAAM,EAAG,MAAO,EAAG,QAAS,EAAG,QAAS,CAAC,CAAE,EAC7D,MACD,CAED,MAAMC,EAAWX,EAAUS,CAAU,EACrCC,EAAgBC,CAAQ,CAC1B,CAEA,SAASD,EAAgB,CAAE,KAAAR,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAI,CAC1D,SAAS,cAAc,aAAa,EAAE,YAAcP,EAAeI,CAAI,EACvE,SAAS,cAAc,cAAc,EAAE,YAAcJ,EAAeK,CAAK,EACzE,SAAS,cAAc,gBAAgB,EAAE,YAAcL,EAAeM,CAAO,EAC7E,SAAS,cAAc,gBAAgB,EAAE,YAAcN,EAAeO,CAAO,CAC/E,CAGA,SAAS,cAAc,cAAc,EAAE,iBAAiB,QAAS,IAAM,CAErE,SAAS,cAAc,cAAc,EAAE,SAAW,GAIlDE,EAFqBV,EAAU,kBAAkB,EAAE,cAAc,GAIjEW,IAEAF,EAAoB,YAAYE,EAAa,GAAI,CACnD,CAAC"}